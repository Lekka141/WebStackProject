{"ast":null,"code":"var _jsxFileName = \"/VaultConnect/Frontend/src/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { AuthContext } from './components/auth/AuthContext';\n\n/**\r\n * ProtectedRoute component ensures that only authenticated users can access certain routes.\r\n *\r\n * @param {object} props - The properties passed to the component.\r\n * @param {React.Component} props.component - The component to render if the user is authenticated.\r\n * @param {...object} rest - Any other properties passed to the route.\r\n * @returns {React.Component} - The route that either renders the component or Navigates to the sign-in page.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: {\n        pathname: '/signin',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(ProtectedRoute, \"V63do9pNTv1q4M9O8C9qYlm3TOw=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Route","Navigate","AuthContext","jsxDEV","_jsxDEV","ProtectedRoute","component","Component","rest","_s","isAuthenticated","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","pathname","state","from","location","_c","$RefreshReg$"],"sources":["/VaultConnect/Frontend/src/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Route, Navigate } from 'react-router-dom';\r\nimport { AuthContext } from './components/auth/AuthContext';\r\n\r\n/**\r\n * ProtectedRoute component ensures that only authenticated users can access certain routes.\r\n *\r\n * @param {object} props - The properties passed to the component.\r\n * @param {React.Component} props.component - The component to render if the user is authenticated.\r\n * @param {...object} rest - Any other properties passed to the route.\r\n * @returns {React.Component} - The route that either renders the component or Navigates to the sign-in page.\r\n */\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const { isAuthenticated } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => \r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Navigate to={{ pathname: '/signin', state: { from: props.location } }} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,SAASC,WAAW,QAAQ,+BAA+B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM;IAAEC;EAAgB,CAAC,GAAGX,UAAU,CAACG,WAAW,CAAC;EAEnD,oBACEE,OAAA,CAACJ,KAAK;IAAA,GACAQ,IAAI;IACRG,MAAM,EAAGC,KAAK,IACZF,eAAe,gBACbN,OAAA,CAACG,SAAS;MAAA,GAAKK;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBZ,OAAA,CAACH,QAAQ;MAACgB,EAAE,EAAE;QAAEC,QAAQ,EAAE,SAAS;QAAEC,KAAK,EAAE;UAAEC,IAAI,EAAER,KAAK,CAACS;QAAS;MAAE;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAE5E;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEN,CAAC;AAACP,EAAA,CAfIJ,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AAiBpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}