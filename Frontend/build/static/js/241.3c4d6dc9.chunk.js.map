{"version":3,"file":"static/js/241.3c4d6dc9.chunk.js","mappings":"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","sources":["components/AppNavbar.js","components/Header.js","components/SideMenu.js","shared-theme/AppTheme.js","components/Widgets/CalendarWidget.js","components/Widgets/ToDoWidget.js","Dashboard.js","theme/customizations.js"],"sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@mui/material';\n\n/**\n * AppNavbar component responsible for rendering the top navigation bar\n * @returns {JSX.Element} - The rendered navigation bar\n */\nfunction AppNavbar() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" component=\"div\">\n          VaultConnect Dashboard\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default AppNavbar;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\n/**\n * Header component responsible for rendering the main dashboard heading and subtitle\n * @returns {JSX.Element} - The rendered header section with a title and subtitle\n */\nfunction Header() {\n  return (\n    <Box sx={{ padding: 2, textAlign: 'center' }}>\n      <Typography variant=\"h4\">\n        Welcome to Your Dashboard\n      </Typography>\n      <Typography variant=\"subtitle1\">\n        Manage your digital footprint with VaultConnect\n      </Typography>\n    </Box>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Drawer, List, ListItem, ListItemText } from '@mui/material';\n\n/**\n * SideMenu component responsible for rendering a permanent side navigation menu\n * @returns {JSX.Element} - The rendered side menu with navigation options\n */\nfunction SideMenu() {\n  return (\n    <Drawer variant=\"permanent\" anchor=\"left\">\n      <List>\n        <ListItem button>\n          <ListItemText primary=\"Home\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemText primary=\"Files\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemText primary=\"Settings\" />\n        </ListItem>\n      </List>\n    </Drawer>\n  );\n}\n\nexport default SideMenu;\n","import React from 'react';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\nfunction AppTheme({ children, themeComponents }) {\r\n  const theme = createTheme({\r\n    ...themeComponents,\r\n    palette: {\r\n      mode: 'light',\r\n      primary: {\r\n        main: '#1976d2',\r\n      },\r\n      secondary: {\r\n        main: '#dc004e',\r\n      },\r\n      background: {\r\n        default: '#f4f6f8',\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: 'Arial, sans-serif',\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default AppTheme;\r\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, MenuItem, Grid } from '@mui/material';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = momentLocalizer(moment);\n\nfunction CalendarWidget() {\n  /* State for managing events */\n  const [events, setEvents] = useState([]);\n  const [newEvent, setNewEvent] = useState({ title: '', start: new Date(), end: new Date(), category: '' });\n  const [open, setOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  /* Load events from localStorage on component mount */\n  useEffect(() => {\n    const storedEvents = JSON.parse(localStorage.getItem('calendarEvents')) || [];\n    setEvents(storedEvents);\n  }, []);\n\n  /* Save events to localStorage whenever they change */\n  useEffect(() => {\n    localStorage.setItem('calendarEvents', JSON.stringify(events));\n  }, [events]);\n\n  /* Handle opening and closing the event dialog */\n  const handleClickOpen = (event = null) => {\n    if (event) {\n      /* Edit mode: populate the form with selected event data */\n      setNewEvent({ ...event, start: new Date(event.start), end: new Date(event.end) });\n      setSelectedEvent(event);\n    } else {\n      /* Create mode: reset the form */\n      setNewEvent({ title: '', start: new Date(), end: new Date(), category: '' });\n      setSelectedEvent(null);\n    }\n    setOpen(true);\n  };\n\n  const handleClose = () => setOpen(false);\n\n  /* Handle adding or editing an event */\n  const handleSaveEvent = () => {\n    if (selectedEvent) {\n      /* Edit existing event */\n      const updatedEvents = events.map((event) =>\n        event === selectedEvent ? newEvent : event\n      );\n      setEvents(updatedEvents);\n    } else {\n      /* Add new event */\n      setEvents([...events, newEvent]);\n    }\n    handleClose();\n  };\n\n  /* Handle deleting an event */\n  const handleDeleteEvent = () => {\n    setEvents(events.filter((event) => event !== selectedEvent));\n    handleClose();\n  };\n\n  return (\n    <Card sx={{ maxWidth: 800, margin: 'auto' }}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          Calendar\n        </Typography>\n\n        {/* Calendar component from react-big-calendar */}\n        <Calendar\n          localizer={localizer}\n          events={events}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          style={{ height: 500 }}\n          selectable\n          onSelectEvent={(event) => handleClickOpen(event)} /* Open dialog for editing */\n          onSelectSlot={({ start, end }) => {\n            setNewEvent({ title: '', start, end, category: '' });\n            setSelectedEvent(null);\n            setOpen(true); /* Open dialog for new event */\n          }}\n        />\n\n        {/* Dialog for adding/editing events */}\n        <Dialog open={open} onClose={handleClose}>\n          <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              label=\"Event Title\"\n              type=\"text\"\n              fullWidth\n              value={newEvent.title}\n              onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n            />\n            <TextField\n              select\n              label=\"Category\"\n              value={newEvent.category}\n              onChange={(e) => setNewEvent({ ...newEvent, category: e.target.value })}\n              fullWidth\n              margin=\"normal\"\n            >\n              <MenuItem value=\"work\">Work</MenuItem>\n              <MenuItem value=\"personal\">Personal</MenuItem>\n              <MenuItem value=\"appointment\">Appointment</MenuItem>\n            </TextField>\n          </DialogContent>\n          <DialogActions>\n            {selectedEvent && (\n              <Button onClick={handleDeleteEvent} color=\"secondary\">\n                Delete\n              </Button>\n            )}\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button onClick={handleSaveEvent} color=\"primary\">\n              {selectedEvent ? 'Update' : 'Add'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default CalendarWidget;\n","import React, { useState } from 'react';\nimport { Card, CardContent, Typography, TextField, Button, List, ListItem, ListItemText, IconButton, Checkbox } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n/**\n * ToDoWidget component for managing a to-do list.\n * Users can add tasks, mark them as completed, and delete tasks.\n * @returns {JSX.Element} - Rendered ToDoWidget component.\n */\nfunction ToDoWidget() {\n  /* State to store the task list */\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  /* Handle adding a new task */\n  const handleAddTask = () => {\n    if (newTask.trim() !== '') {\n      setTasks([...tasks, { text: newTask, completed: false }]);\n      setNewTask('');\n    }\n  };\n\n  /* Handle toggling task completion */\n  const handleToggleTask = (index) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index].completed = !updatedTasks[index].completed;\n    setTasks(updatedTasks);\n  };\n\n  /* Handle deleting a task */\n  const handleDeleteTask = (index) => {\n    const updatedTasks = tasks.filter((_, i) => i !== index);\n    setTasks(updatedTasks);\n  };\n\n  return (\n    <Card sx={{ maxWidth: 400, margin: 'auto' }}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          To-Do List\n        </Typography>\n        {/* Input field for adding a new task */}\n        <TextField\n          label=\"New Task\"\n          variant=\"outlined\"\n          size=\"small\"\n          value={newTask}\n          onChange={(e) => setNewTask(e.target.value)}\n          sx={{ marginBottom: 2, width: '100%' }}\n        />\n        {/* Button to add a new task */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleAddTask}\n          sx={{ width: '100%' }}\n        >\n          Add Task\n        </Button>\n\n        {/* Display the list of tasks */}\n        <List sx={{ marginTop: 2 }}>\n          {tasks.map((task, index) => (\n            <ListItem key={index} secondaryAction={\n              <IconButton edge=\"end\" onClick={() => handleDeleteTask(index)}>\n                <DeleteIcon />\n              </IconButton>\n            }>\n              {/* Checkbox to mark task as completed */}\n              <Checkbox\n                checked={task.completed}\n                onChange={() => handleToggleTask(index)}\n              />\n              <ListItemText\n                primary={task.text}\n                sx={{ textDecoration: task.completed ? 'line-through' : 'none' }}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default ToDoWidget;\n","import React from 'react';\nimport { alpha } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport AppNavbar from './components/AppNavbar';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\nimport AppTheme from './shared-theme/AppTheme';\nimport GridLayout from 'react-grid-layout'; // Import React Grid Layout\nimport CalendarWidget from './components/Widgets/CalendarWidget'; // Import CalendarWidget component\nimport WidgetSelector from './components/WidgetSelector'; // Widget selector component for future use\n\n/* Import custom theme components for customizations */\nimport {\n  chartsCustomizations,\n  dataGridCustomizations,\n  datePickersCustomizations,\n  treeViewCustomizations,\n} from './theme/customizations';\n\n/* Merge the customizations into one object to be passed to AppTheme */\nconst xThemeComponents = {\n  ...chartsCustomizations,\n  ...dataGridCustomizations,\n  ...datePickersCustomizations,\n  ...treeViewCustomizations,\n};\n\nexport default function Dashboard(props) {\n  /* Define the layout for the React Grid Layout */\n  const layout = [\n    { i: 'calendar', x: 0, y: 0, w: 3, h: 2 },\n    /* Future widgets can be added to the layout here */\n  ];\n\n  return (\n    <AppTheme {...props} themeComponents={xThemeComponents}>\n      {/* Ensures proper color schemes and UI defaults */}\n      <CssBaseline enableColorScheme />\n      <Box sx={{ display: 'flex' }}>\n        {/* Side menu for navigation */}\n        <SideMenu />\n        {/* Top navigation bar */}\n        <AppNavbar />\n        {/* Main content area */}\n        <Box\n          component=\"main\"\n          sx={(theme) => ({\n            flexGrow: 1,\n            backgroundColor: theme.vars\n              ? `rgba(${theme.vars.palette.background.defaultChannel} / 1)`\n              : alpha(theme.palette.background.default, 1),\n            overflow: 'auto',\n          })}\n        >\n          {/* Stack to arrange content elements vertically */}\n          <Stack\n            spacing={2}\n            sx={{\n              alignItems: 'center',\n              mx: 3,\n              pb: 10,\n              mt: { xs: 8, md: 0 },\n            }}\n          >\n            {/* Page header */}\n            <Header />\n            {/* Use React Grid Layout to manage widget placements */}\n            <GridLayout className=\"layout\" layout={layout} cols={9} rowHeight={100} width={1200}>\n              {/* Calendar widget rendered in a specific layout */}\n              <div key=\"calendar\">\n                <CalendarWidget />\n              </div>\n              {/* Future widgets can be rendered here */}\n            </GridLayout>\n          </Stack>\n        </Box>\n      </Box>\n    </AppTheme>\n  );\n}\n","export const chartsCustomizations = {\r\n    // Add chart-specific customizations here\r\n  };\r\n  \r\n  export const dataGridCustomizations = {\r\n    MuiDataGrid: {\r\n      styleOverrides: {\r\n        root: {\r\n          border: '1px solid #ccc',\r\n          borderRadius: '4px',\r\n          backgroundColor: '#f9f9f9',\r\n        },\r\n      },\r\n    },\r\n  };\r\n  \r\n  export const datePickersCustomizations = {\r\n    MuiDatePicker: {\r\n      styleOverrides: {\r\n        root: {\r\n          margin: '8px',\r\n        },\r\n      },\r\n    },\r\n  };\r\n  \r\n  export const treeViewCustomizations = {\r\n    MuiTreeView: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: '#1976d2',\r\n        },\r\n      },\r\n    },\r\n  };\r\n  "],"names":["_jsx","AppBar","position","children","Toolbar","Typography","variant","component","_jsxs","Box","sx","padding","textAlign","Drawer","anchor","List","ListItem","button","ListItemText","primary","_ref","themeComponents","theme","createTheme","palette","mode","main","secondary","background","default","typography","fontFamily","ThemeProvider","CssBaseline","localizer","momentLocalizer","moment","events","setEvents","useState","newEvent","setNewEvent","title","start","Date","end","category","open","setOpen","selectedEvent","setSelectedEvent","useEffect","storedEvents","JSON","parse","localStorage","getItem","setItem","stringify","handleClose","Card","maxWidth","margin","CardContent","gutterBottom","Calendar","startAccessor","endAccessor","style","height","selectable","onSelectEvent","event","arguments","length","undefined","handleClickOpen","onSelectSlot","Dialog","onClose","DialogTitle","DialogContent","TextField","autoFocus","label","type","fullWidth","value","onChange","e","target","select","MenuItem","DialogActions","Button","onClick","handleDeleteEvent","filter","color","handleSaveEvent","updatedEvents","map","xThemeComponents","MuiDataGrid","styleOverrides","root","border","borderRadius","backgroundColor","MuiDatePicker","MuiTreeView","Dashboard","props","AppTheme","enableColorScheme","display","SideMenu","AppNavbar","flexGrow","vars","defaultChannel","alpha","overflow","Stack","spacing","alignItems","mx","pb","mt","xs","md","Header","GridLayout","className","layout","i","x","y","w","h","cols","rowHeight","width","CalendarWidget"],"sourceRoot":""}